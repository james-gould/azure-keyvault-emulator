// <auto-generated />
using System;
using AzureKeyVaultEmulator.Shared.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AzureKeyVaultEmulator.Shared.Migrations
{
    [DbContext(typeof(VaultContext))]
    [Migration("20250921172203_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificateBundle", b =>
                {
                    b.Property<Guid>("PersistedId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("CertificateBlob")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("CertificateContents")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "cer");

                    b.Property<string>("CertificateIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "kid");

                    b.Property<string>("PersistedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersistedVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecoveryId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "recoveryId");

                    b.Property<string>("SecretId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "sid");

                    b.Property<string>("TagsSerialized")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Tags");

                    b.Property<string>("VaultUri")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "vaultUri");

                    b.Property<string>("X509Thumbprint")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "x5t");

                    b.HasKey("PersistedId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificatePolicy", b =>
                {
                    b.Property<Guid>("PersistedId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackingLifetimeActions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IssuerPersistedId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentCertificateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersistedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersistedVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PersistedId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("IssuerPersistedId");

                    b.HasIndex("ParentCertificateId")
                        .IsUnique();

                    b.ToTable("CertificatePolicies");

                    b.HasAnnotation("Relational:JsonPropertyName", "policy");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.IssuerBundle", b =>
                {
                    b.Property<Guid>("PersistedId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PersistedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersistedVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "provider");

                    b.HasKey("PersistedId");

                    b.ToTable("Issuers");

                    b.HasAnnotation("Relational:JsonPropertyName", "issuer");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.Requests.CertificateContacts", b =>
                {
                    b.Property<Guid>("PersistedId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackingContacts")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersistedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersistedVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PersistedId");

                    b.ToTable("CertificateContacts");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Keys.KeyBundle", b =>
                {
                    b.Property<Guid>("PersistedId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersistedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersistedVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TagsSerialized")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Tags");

                    b.HasKey("PersistedId");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Secrets.SecretBundle", b =>
                {
                    b.Property<Guid>("PersistedId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "contentType");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersistedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersistedVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("TagsSerialized")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Tags");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("PersistedId");

                    b.ToTable("Secrets");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificateBundle", b =>
                {
                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificateAttributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("Created")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "created");

                            b1.Property<bool>("Enabled")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "enabled");

                            b1.Property<long>("Expiration")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "exp");

                            b1.Property<long>("NotBefore")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "nbf");

                            b1.Property<int>("RecoverableDays")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "recoverableDays");

                            b1.Property<string>("RecoveryLevel")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "recoveryLevel");

                            b1.Property<long>("Updated")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "updated");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "version");

                            b1.HasKey("PersistedId");

                            b1.ToTable("Certificates");

                            b1.HasAnnotation("Relational:JsonPropertyName", "attributes");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificatePolicy", b =>
                {
                    b.HasOne("AzureKeyVaultEmulator.Shared.Models.Certificates.IssuerBundle", null)
                        .WithMany("Policies")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AzureKeyVaultEmulator.Shared.Models.Certificates.IssuerBundle", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerPersistedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificateBundle", "CertificateBundle")
                        .WithOne("CertificatePolicy")
                        .HasForeignKey("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificatePolicy", "ParentCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificateAttributes", "CertificateAttributes", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("Created")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "created");

                            b1.Property<bool>("Enabled")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "enabled");

                            b1.Property<long>("Expiration")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "exp");

                            b1.Property<long>("NotBefore")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "nbf");

                            b1.Property<int>("RecoverableDays")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "recoverableDays");

                            b1.Property<string>("RecoveryLevel")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "recoveryLevel");

                            b1.Property<long>("Updated")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "updated");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "version");

                            b1.HasKey("PersistedId");

                            b1.ToTable("CertificatePolicies");

                            b1.HasAnnotation("Relational:JsonPropertyName", "attributes");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Certificates.X509CertificateProperties", "CertificateProperties", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BackingEnhancedUsage")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.PrimitiveCollection<string>("BackingKeyUsage")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "key_usage");

                            b1.Property<string>("Subject")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "subject");

                            b1.Property<int>("ValidityMonths")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "validity_months");

                            b1.HasKey("PersistedId");

                            b1.ToTable("CertificatePolicies");

                            b1.HasAnnotation("Relational:JsonPropertyName", "x509_props");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");

                            b1.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Certificates.SubjectAlternativeNames", "SubjectAlternativeNames", b2 =>
                                {
                                    b2.Property<Guid>("PersistedId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("BackingDns")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("BackingEmails")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("BackingUpns")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("PersistedId");

                                    b2.ToTable("CertificatePolicies");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "sans");

                                    b2.WithOwner()
                                        .HasForeignKey("PersistedId");
                                });

                            b1.Navigation("SubjectAlternativeNames")
                                .IsRequired();
                        });

                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Keys.KeyProperties", "KeyProperties", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("JsonWebKeyCurveName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "crv");

                            b1.Property<string>("JsonWebKeyType")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "kty");

                            b1.Property<int>("KeySize")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "key_size");

                            b1.Property<bool>("ReuseKey")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "reuse_key");

                            b1.HasKey("PersistedId");

                            b1.ToTable("CertificatePolicies");

                            b1.HasAnnotation("Relational:JsonPropertyName", "key_props");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Secrets.SecretProperties", "SecretProperies", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "contentType");

                            b1.HasKey("PersistedId");

                            b1.ToTable("CertificatePolicies");

                            b1.HasAnnotation("Relational:JsonPropertyName", "secret_props");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.Navigation("CertificateAttributes")
                        .IsRequired();

                    b.Navigation("CertificateBundle");

                    b.Navigation("CertificateProperties");

                    b.Navigation("Issuer");

                    b.Navigation("KeyProperties");

                    b.Navigation("SecretProperies");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.IssuerBundle", b =>
                {
                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Certificates.IssuerAttributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("Created")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "created");

                            b1.Property<bool>("Enabled")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "enabled");

                            b1.Property<long>("Expiration")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "exp");

                            b1.Property<long>("NotBefore")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "nbf");

                            b1.Property<int>("RecoverableDays")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "recoverableDays");

                            b1.Property<string>("RecoveryLevel")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "recoveryLevel");

                            b1.Property<long>("Updated")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "updated");

                            b1.HasKey("PersistedId");

                            b1.ToTable("Issuers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "attributes");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Certificates.IssuerCredentials", "Credentials", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AccountId")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "account_id");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "pwd");

                            b1.HasKey("PersistedId");

                            b1.ToTable("Issuers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "credentials");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Certificates.OrganisationDetails", "OrganisationDetails", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BackingAdminDetails")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "id");

                            b1.HasKey("PersistedId");

                            b1.ToTable("Issuers");

                            b1.HasAnnotation("Relational:JsonPropertyName", "org_details");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();

                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("OrganisationDetails");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Keys.KeyBundle", b =>
                {
                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Keys.InternalJsonWebKey", "Key", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("D")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "d");

                            b1.Property<string>("Dp")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "dp");

                            b1.Property<string>("Dq")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "dq");

                            b1.Property<string>("E")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "e");

                            b1.Property<string>("K")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "k");

                            b1.Property<string>("KeyCurve")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "crv");

                            b1.Property<string>("KeyHsm")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "key_hsm");

                            b1.Property<string>("KeyIdentifier")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "kid");

                            b1.Property<string>("KeyName")
                                .HasColumnType("TEXT");

                            b1.PrimitiveCollection<string>("KeyOperations")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "key_ops");

                            b1.Property<string>("KeyType")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "kty");

                            b1.Property<string>("KeyVersion")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("N")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "n");

                            b1.Property<string>("P")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "p");

                            b1.Property<string>("Q")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "q");

                            b1.Property<string>("Qi")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "qi");

                            b1.Property<byte[]>("RSAParametersBlob")
                                .IsRequired()
                                .HasColumnType("BLOB");

                            b1.Property<string>("X")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "x");

                            b1.Property<string>("Y")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "y");

                            b1.HasKey("PersistedId");

                            b1.ToTable("Keys");

                            b1.HasAnnotation("Relational:JsonPropertyName", "key");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Keys.KeyAttributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("Created")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "created");

                            b1.Property<bool>("Enabled")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "enabled");

                            b1.Property<long>("Expiration")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "exp");

                            b1.Property<long>("NotBefore")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "nbf");

                            b1.Property<int>("RecoverableDays")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "recoverableDays");

                            b1.Property<string>("RecoveryLevel")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "recoveryLevel");

                            b1.Property<long>("Updated")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "updated");

                            b1.HasKey("PersistedId");

                            b1.ToTable("Keys");

                            b1.HasAnnotation("Relational:JsonPropertyName", "attributes");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();

                    b.Navigation("Key")
                        .IsRequired();
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Secrets.SecretBundle", b =>
                {
                    b.OwnsOne("AzureKeyVaultEmulator.Shared.Models.Secrets.SecretAttributes", "Attributes", b1 =>
                        {
                            b1.Property<Guid>("PersistedId")
                                .HasColumnType("TEXT");

                            b1.Property<long>("Created")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "created");

                            b1.Property<bool>("Enabled")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "enabled");

                            b1.Property<long>("Expiration")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "exp");

                            b1.Property<long>("NotBefore")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "nbf");

                            b1.Property<int>("RecoverableDays")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "recoverableDays");

                            b1.Property<string>("RecoveryLevel")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "recoveryLevel");

                            b1.Property<long>("Updated")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "updated");

                            b1.HasKey("PersistedId");

                            b1.ToTable("Secrets");

                            b1.HasAnnotation("Relational:JsonPropertyName", "attributes");

                            b1.WithOwner()
                                .HasForeignKey("PersistedId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.CertificateBundle", b =>
                {
                    b.Navigation("CertificatePolicy");
                });

            modelBuilder.Entity("AzureKeyVaultEmulator.Shared.Models.Certificates.IssuerBundle", b =>
                {
                    b.Navigation("Policies");
                });
#pragma warning restore 612, 618
        }
    }
}
